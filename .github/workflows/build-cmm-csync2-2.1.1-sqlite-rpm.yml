name: CMM rpmbuild Csync2 2.1.1 + SQLite RPM

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: ['almalinux/9-init', 'almalinux/8-init']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Sysbox
      run: |
        curl -LO https://downloads.nestybox.com/sysbox/releases/v0.6.4/sysbox-ce_0.6.4-0.linux_amd64.deb
        sudo dpkg -i sysbox-ce_0.6.4-0.linux_amd64.deb || sudo apt-get install -f

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up AlmaLinux container and build Csync2 + SQLite using rpmbuild
      run: |
        mkdir -p ${{ github.workspace }}/rpms
        docker pull ${{ matrix.os }}
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ${{ matrix.os }} /bin/bash -c "
          if [[ '${{ matrix.os }}' == 'almalinux/8-init' ]]; then
            DISTTAG='el8'
          else
            DISTTAG='el9'
          fi

          dnf install -y --skip-broken \
                  initscripts \
                  systemd-sysv \
                  systemd-devel \
                  hostname \
                  systemd \
                  dos2unix \
                  curl \
                  python3 \
                  iptables \
                  iproute \
                  kmod \
                  procps-ng \
                  sudo \
                  udev --allowerasing

          systemctl unmask \
                  systemd-remount-fs.service \
                  dev-hugepages.mount \
                  sys-fs-fuse-connections.mount \
                  systemd-logind.service \
                  getty.target \
                  console-getty.service

          echo "ReadKMsg=no" >> /etc/systemd/journald.conf

          # Copy sqlite-benchmark.py
          cp /workspace/scripts/sqlite-benchmark.py /tmp
          chmod +x /tmp/sqlite-benchmark.py

          # Copy build script into the container
          cp /workspace/build-sqlite-rpmbuild.sh /tmp
          chmod +x /tmp/build-sqlite-rpmbuild.sh

          # Run build script
          /tmp/build-sqlite-rpmbuild.sh $DISTTAG

          # Copy the built RPMs to the mounted /workspace/rpms directory on the host
          mkdir -p /workspace/rpms
          cp /root/rpmbuild/RPMS/x86_64/*.rpm /workspace/rpms/
          cp /root/rpmbuild/SRPMS/*.rpm /workspace/rpms/
          
          # List the RPMs in the /workspace/rpms directory
          echo
          ls -lah /workspace/rpms/

          # Install the built RPMs
          echo
          yum localinstall -y /workspace/rpms/sqlite-custom-*.x86_64.rpm /workspace/rpms/sqlite-custom-libs-*.x86_64.rpm /workspace/rpms/sqlite-custom-devel-*.x86_64.rpm
          # Check package files for each package
          echo
          echo 'rpm -ql sqlite-custom'
          rpm -ql sqlite-custom
          echo
          echo 'rpm -ql sqlite-custom-libs'
          rpm -ql sqlite-custom-libs
          echo
          echo 'rpm -ql sqlite-custom-devel'
          rpm -ql sqlite-custom-devel
          # Changelog check
          echo
          rpm -q --changelog sqlite-custom
         
          # Check the installed RPM details for each package
          echo
          echo 'rpm -qi sqlite-custom'
          rpm -qi sqlite-custom
          echo
          echo 'rpm -qi sqlite-custom-libs'
          rpm -qi sqlite-custom-libs
          echo
          echo 'rpm -qi sqlite-custom-devel'
          rpm -qi sqlite-custom-devel
          # Check sqlite3 version
          echo
          echo '/opt/sqlite-custom/bin/sqlite3 --version'
          /opt/sqlite-custom/bin/sqlite3 --version | tee /workspace/sqlite-version-output.log

          # run sqlite benchmarks
          echo
          /tmp/sqlite-benchmark.py | tee /workspace/sqlite-benchmark-output.log
          echo
          
          # Copy build script into the container
          cp /workspace/build-cmm-csync2-2.1.1-sqlite-rpm.sh /tmp
          chmod +x /tmp/build-cmm-csync2-2.1.1-sqlite-rpm.sh

          # Run build script
          /tmp/build-cmm-csync2-2.1.1-sqlite-rpm.sh $DISTTAG

          # Copy the built RPMs to the mounted /workspace/rpms directory on the host
          mkdir -p /workspace/rpms
          \cp -f /root/rpmbuild/RPMS/x86_64/*.rpm /workspace/rpms/
          \cp -f /root/rpmbuild/SRPMS/*.rpm /workspace/rpms/
          
          # List the RPMs in the /workspace/rpms directory
          echo
          ls -lah /workspace/rpms/

          # Install the built RPM (non-debug version)
          echo
          yum localinstall -y /root/rpmbuild/RPMS/x86_64/csync2-2.*.x86_64.rpm

           # Start csync2
          echo
          systemctl start csync2.socket || true
          echo
          systemctl status csync2.socket --no-pager || true | tee /workspace/csync2-socket-status.log

          # Check csync2 socket listen port
          echo
          ss -tlnp | grep 30865 || true | tee /workspace/csync2-socket-ss-status.log

          # Check csync2 journalctl logs
          echo
          journalctl -u csync2.socket -u "csync2@*" --no-pager || true | tee /workspace/csync2-socket-journalctl.log

          # Check package files
          echo
          rpm -ql csync2 | tee /workspace/csync2-qpl-output.log

          # Changelog check
          echo
          rpm -q --changelog csync2 | tee /workspace/csync2-changelog-output.log
         
          # Check the installed RPM details
          echo
          yum -q info csync2 | tee /workspace/csync2-yuminfo-output.log

          # Check permissions and ownership
          echo
          echo 'ls -l /etc/csync2'
          ls -l /etc/csync2 || echo '/etc/csync2 does not exist'
          echo
          echo 'ls -l /usr/sbin/csync2'
          ls -l /usr/sbin/csync2 || echo 'csync2 binary not found in /usr/sbin'

          echo
          echo 'Checking for lock file:'
          ls -l /etc/csync2/csync2.lock || echo 'Lock file does not exist'

          echo
          echo 'ldd /usr/sbin/csync2'
          ldd /usr/sbin/csync2 | tee /workspace/csync2-ldd-output.log || true
          
          # Run the csync2 command to verify it works
          echo
          echo '/usr/sbin/csync2 -v'
          /usr/sbin/csync2 -v || true

          echo
          echo 'nm /usr/sbin/csync2 | grep sqlite'
          nm /usr/sbin/csync2 | grep sqlite

          echo
          echo 'readelf -d /usr/sbin/csync2 | grep PATH'
          readelf -d /usr/sbin/csync2 | grep PATH
        "

    - name: Display csync2 socket status
      run: |
        echo "Displaying csync2 socket status:"
        cat ${{ github.workspace }}/csync2-socket-status.log

    - name: Display csync2 ss port check
      run: |
        echo "Displaying csync2 ss port check:"
        cat ${{ github.workspace }}/csync2-socket-ss-status.log

    - name: Display csync2 journalctl log
      run: |
        echo "Displaying csync2 journalctl log:"
        cat ${{ github.workspace }}/csync2-socket-journalctl.log

    - name: Display SQLite Version
      run: |
        echo "Displaying SQLite Version:"
        cat ${{ github.workspace }}/sqlite-version-output.log

    - name: Display SQLite Benchmark results
      run: |
        echo "Displaying SQLite Benchmark Results:"
        cat ${{ github.workspace }}/sqlite-benchmark-output.log

    - name: Display csync2 ldd info
      run: |
        echo "Displaying csync2 ldd info:"
        cat ${{ github.workspace }}/csync2-ldd-output.log

    - name: Display csync2 qpl info
      run: |
        echo "Displaying csync2 qpl info:"
        cat ${{ github.workspace }}/csync2-qpl-output.log

    - name: Display csync2 changelog info
      run: |
        echo "Displaying csync2 changelog info:"
        cat ${{ github.workspace }}/csync2-changelog-output.log

    - name: Display csync2 yum info
      run: |
        echo "Displaying csync2 yum info:"
        cat ${{ github.workspace }}/csync2-yuminfo-output.log

    - name: Debugging Show contents of /workspace/rpms
      run: |
        echo "Checking for RPMs in /workspace/rpms on host..."
        ls -lah ${{ github.workspace }}/rpms/

    - name: Set custom artifact name
      run: |
        if [[ ${{ matrix.os }} == 'almalinux/8-init' ]]; then
          echo "ARTIFACT_NAME=csync2-2.1.1-sqlite-rpmbuild-rpm-almalinux-8" >> $GITHUB_ENV
        else
          echo "ARTIFACT_NAME=csync2-2.1.1-sqlite-rpmbuild-rpm-almalinux-9" >> $GITHUB_ENV
        fi

    - name: Upload RPM
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ github.workspace }}/rpms/*.rpm
        if-no-files-found: warn
        compression-level: 0
        overwrite: false
